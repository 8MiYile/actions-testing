name: Build OlivedPro AppImage

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  build-appimage:
    runs-on: ubuntu-22.04
    env:
      APP_NAME: OlivedPro
      OUTPUT_DIR: dist

    steps:
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tidy unzip libwebkit2gtk-4.0-37 libgtk-3-0 libfuse2

    - name: Cache AppImage tools
      id: cache-appimage-tools
      uses: actions/cache@v4
      with:
        path: |
          linuxdeploy-x86_64.AppImage
          appimagetool-x86_64.AppImage
        key: appimage-tools-cache

    - name: Download linuxdeploy and appimagetool if not cached
      if: steps.cache-appimage-tools.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-gtk/raw/refs/heads/master/linuxdeploy-plugin-gtk.sh
        chmod +x linuxdeploy*.AppImage appimagetool*.AppImage linuxdeploy-plugin-gtk.sh

    - name: Find and download latest binary
      run: |
        DOWNLOAD_URL=$(curl -sL "https://drive.olived.app/share/661b6145579df/" | \
          grep -oP 'href="\K(/share/661b6145579df/OlivedPro_web[^"]*_linux_amd64\.zip)' | \
          head -1 | awk '{print "https://drive.olived.app"$1}')

        # 如果没有找到 URL，则报错并退出
        if [ -z "$DOWNLOAD_URL" ]; then
          echo "❌ Failed to find download link"
          exit 1
        fi

        echo "✅ Download URL: $DOWNLOAD_URL"

        # 下载并解压二进制文件
        wget "$DOWNLOAD_URL" -O olivedpro.zip
        unzip olivedpro.zip -d binary
        chmod +x binary/OlivedPro_web
        ldd binary/OlivedPro_web

        # 获取版本号并设置环境变量
        VERSION=$(basename "$DOWNLOAD_URL" | grep -oP 'OlivedPro_web_\K[0-9.]+')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Prepare AppDir
      run: |
        mkdir -p AppDir/usr/{bin,lib}
        cp binary/OlivedPro_web AppDir/usr/bin/
        cp /lib/x86_64-linux-gnu/libc.so.6 AppDir/usr/lib/
        cp /lib64/ld-linux-x86-64.so.2 AppDir/usr/lib/

    - name: Create custom AppRun
      run: |
        cat > AppDir/AppRun << 'EOF'
        #!/bin/sh
        HERE="$(dirname "$(readlink -f "$0")")"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
        export GLIBC_TUNABLES=glibc.rtld.disable_kernel=1
        exec "${HERE}/usr/bin/OlivedPro_web" "$@"
        EOF
        chmod +x AppDir/AppRun

    - name: Run linuxdeploy (minimal deps)
      run: |
        ./linuxdeploy-x86_64.AppImage \
          --appdir AppDir \
          --plugin gtk \

    - name: Create AppImage
      run: |
        mkdir -p ${{ env.OUTPUT_DIR }}
        ./appimagetool-x86_64.AppImage \
          AppDir \
          ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}_${{ env.VERSION }}_x86_64.AppImage

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: OlivedPro-AppImage
        path: ${{ env.OUTPUT_DIR }}/*.AppImage
